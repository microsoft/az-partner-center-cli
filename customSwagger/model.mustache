#  ---------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
#  ---------------------------------------------------------
{{>partial_header}}

import re  # noqa: F401

{{#imports}}{{#@first}}
{{/@first}}
{{import}}  # noqa: F401,E501

{{/imports}}
{{#models}}
{{#model}}

class {{classname}}{{#parent}}({{parent}}){{/parent}}:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self{{#vars}}, {{name}}={{#defaultValue}}{{{defaultValue}}}{{/defaultValue}}{{^defaultValue}}None{{/defaultValue}}{{/vars}}{{#parent}}, *args, **kwargs{{/parent}}):
        """{{classname}} - a model defined in Swagger"""
{{#parent}}
        {{parent}}.__init__(self, *args, **kwargs)
{{/parent}}

{{#vars}}{{#@first}}
{{/@first}}
{{#required}}
        self.{{name}} = {{name}}
{{/required}}
{{^required}}
        self.{{name}} = {{name}} {{#isListContainer}}or []{{/isListContainer}}{{#isMapContainer}}or {} {{/isMapContainer}}
{{/required}}
{{/vars}}

{{#vars}}
    @property
    def {{name}}(self) -> {{datatype}}:
        """
        Gets the {{name}} of this {{classname}}.
{{#description}}

        {{{description}}}
{{/description}}

        :return: The {{name}} of this {{classname}}.
        """
        return self._{{name}}

    @{{name}}.setter
    def {{name}}(self, {{name}}: {{datatype}}):
        """
        Sets the {{name}} of this {{classname}}.

{{#description}}
        {{{description}}}

{{/description}}
        :param {{name}}: The {{name}} of this {{classname}}.
        """
{{#required}}
        if {{name}} is None:
            raise ValueError("Invalid value for `{{name}}`, must not be `None`")
{{/required}}
{{#isEnum}}
{{#isContainer}}
        allowed_values = [{{#allowableValues}}{{#values}}{{#items.isString}}"{{/items.isString}}{{{this}}}{{#items.isString}}"{{/items.isString}}{{^@last}}, {{/@last}}{{/values}}{{/allowableValues}}]
{{#isListContainer}}
        if not set({{{name}}}).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `{{{name}}}` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set({{{name}}}) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )
{{/isListContainer}}
{{#isMapContainer}}
        if not set({{{name}}}.keys()).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid keys in `{{{name}}}` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set({{{name}}}.keys()) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )
{{/isMapContainer}}
{{/isContainer}}
{{^isContainer}}
        allowed_values = [{{#allowableValues}}{{#values}}{{#isString}}"{{/isString}}{{{this}}}{{#isString}}"{{/isString}}{{^@last}}, {{/@last}}{{/values}}{{/allowableValues}}]
        if {{{name}}} not in allowed_values:
            raise ValueError(
                "Invalid value for `{{{name}}}` ({0}), must be one of {1}"
                .format({{{name}}}, allowed_values)
            )
{{/isContainer}}
{{/isEnum}}
{{^isEnum}}
{{#hasValidation}}
{{#maxLength}}
        if {{name}} is not None and len({{name}}) > {{maxLength}}:
            raise ValueError("Invalid value for `{{name}}`, length must be less than or equal to `{{maxLength}}`")
{{/maxLength}}
{{#minLength}}
        if {{name}} is not None and len({{name}}) < {{minLength}}:
            raise ValueError("Invalid value for `{{name}}`, length must be greater than or equal to `{{minLength}}`")
{{/minLength}}
{{#maximum}}
        if {{name}} is not None and {{name}} >{{#exclusiveMaximum}}={{/exclusiveMaximum}} {{maximum}}:
            raise ValueError("Invalid value for `{{name}}`, must be a value less than {{^exclusiveMaximum}}or equal to {{/exclusiveMaximum}}`{{maximum}}`")
{{/maximum}}
{{#minimum}}
        if {{name}} is not None and {{name}} <{{#exclusiveMinimum}}={{/exclusiveMinimum}} {{minimum}}:
            raise ValueError("Invalid value for `{{name}}`, must be a value greater than {{^exclusiveMinimum}}or equal to {{/exclusiveMinimum}}`{{minimum}}`")
{{/minimum}}
{{#pattern}}
        if {{name}} is not None and not re.search(r'{{{vendorExtensions.x-regex}}}', {{name}}{{#vendorExtensions.x-modifiers}}{{#@first}}, flags={{/@first}}re.{{.}}{{^@last}} | {{/@last}}{{/vendorExtensions.x-modifiers}}):
            raise ValueError(r"Invalid value for `{{name}}`, must be a follow pattern or equal to `{{{pattern}}}`")
{{/pattern}}
{{#maxItems}}
        if {{name}} is not None and len({{name}}) > {{maxItems}}:
            raise ValueError("Invalid value for `{{name}}`, number of items must be less than or equal to `{{maxItems}}`")
{{/maxItems}}
{{#minItems}}
        if {{name}} is not None and len({{name}}) < {{minItems}}:
            raise ValueError("Invalid value for `{{name}}`, number of items must be greater than or equal to `{{minItems}}`")
{{/minItems}}
{{/hasValidation}}
{{/isEnum}}

        self._{{name}} = {{name}}

{{/vars}}
{{/model}}
{{/models}}
